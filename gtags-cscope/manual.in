@HEADER GTAGS-CSCOPE,1,March 2011,GNU Project
@NAME   gtags-cscope - interactively examine a C program
@SYNOPSIS
	@name{gtags-cscope} [-bCdehLlVv][-F symfile ][-0123456789 @arg{pattern}][-p n]
@DESCRIPTION
	@name{gtags-cscope} is an interactive, screen-oriented tool that allows the user to
	browse through C source files for specified elements of code.

	@name{gtags-cscope} builds the symbol cross-reference the first time it is used on
	the source files for the program being browsed. On a subsequent invocation, 
	@name{gtags-cscope} rebuilds the cross-reference only if a source file
	has changed or the list of source files is different. When the
	cross-reference is rebuilt, the data for the unchanged files are
	copied from the old cross-reference, which makes rebuilding faster
	than the initial build.
@OPTIONS
	Some command line arguments can only occur as the only argument in
	the execution of @name{gtags-cscope}.  They cause the program to just print out
	some output and exit immediately:
	@begin_itemize
	@item{@option{-h}}
		View the long usage help display.
	@item{@option{-V}}
		Print on the first line of screen the version number of gtags-cscope.
	@item{@option{--help}}
		Same as @option{-h}
	@item{@option{--version}}
		Same as @option{-V}
	@end_itemize

	The following options can appear in any combination:
	@begin_itemize
	@item{@option{-b}}
		Build the cross-reference only.
	@item{@option{-C}}
		Ignore letter case when searching.
	@item{@option{-d}}
		Do not update the cross-reference.
	@item{@option{-e}}
		Suppress the <Ctrl>-e command prompt between files.
	@item{@option{-F} @arg{symfile}}
		Read symbol reference lines from @arg{symfile}. 
		(A symbol reference file is created by > and >>,
		and can also be read using the < command,
		described under ``Issuing Subsequent Requests'', below.)
	@item{@option{-L}}
		Do a single search with line-oriented output when used with the
		-num pattern option.
	@item{@option{-l}}
		Line-oriented interface (see ``Line-Oriented Interface'' below).
	@item{@option{-[0-9]} @arg{pattern}}
		Go to input field @arg{num} (counting from 0) and find 
		@arg{pattern}.
	@item{@option{-p} @arg{n}}
		Display the last @arg{n} file path components instead of
		the default (1). Use @arg{0} not to display the file name at all.
	@item{@option{-v}}
		Be more verbose in line-oriented mode.  Output progress updates during
		database building and searches.
	@end_itemize
@Requesting the initial search
	After the cross-reference is ready, @name{gtags-cscope} will display this menu:

	@begin_verbatim
	Find this C symbol:
	Find this function definition:
	Find functions called by this function (N/A):
	Find functions calling this function:
	Find this text string:
	Change this text string:
	Find this egrep pattern:
	Find this file:
	Find files #including this file:
	@end_verbatim

	Press the <Up> or <Down> keys repeatedly to move to the desired input
	field, type the text to search for, and then press the <Return> key.
@Issuing subsequent requests
	If the search is successful, any of these single-character commands
	can be used:
	@begin_itemize
	@item{0-9a-zA-Z}
		Edit the file referenced by the given line number.
	@item{<Space>}
		Display next set of matching lines.
	@item{<Tab>}
		Alternate between the menu and the list of matching lines
	@item{<Up>}
		Move to the previous menu item (if the cursor is in the menu)
		or move to the previous matching line (if the cursor is in the
		matching line list.)
	@item{<Down>}
		Move to the next menu item (if the cursor is in the menu)
		or move to the next matching line (if the cursor is in the
		matching line list.)
	@item{+}
		Display next set of matching lines.
	@item{-}
		Display previous set of matching lines.
	@item{^e}
		Edit displayed files in order.
	@item{>}
		Write the displayed list of lines to a file.
	@item{>>}
		Append the displayed list of lines to a file.
	@item{<}
		Read lines from a file that is in symbol reference format
		(created by > or >>), just like the -F option.
	@item{^}
		Filter all lines through a shell command and display the
		resulting lines, replacing the lines that were already there.
	@item{|}
		Pipe all lines to a shell command and display them without
		changing them.
	@end_itemize

	At any time these single-character commands can also be used:
	@begin_itemize
	@item{<Return>}
		Move to next input field.
	@item{^g}
		Read lines from the result of the execution of specified command.
	@item{^n}
		Move to next input field.
	@item{^p}
		Move to previous input field.
	@item{^y}
		Search with the last text typed.
	@item{^b}
		Move to previous input field and search pattern.
	@item{^f}
		Move to next input field and search pattern.
	@item{^c}
		Toggle ignore/use letter case when searching. (When ignoring
		letter case, search for ``FILE'' will match ``File'' and ``file''.)
	@item{^r}
		Rebuild the cross-reference.
	@item{!}
		Start an interactive shell (type ^d to return to gtags-cscope).
	@item{^l}
		Redraw the screen.
	@item{?}
		Give help information about gtags-cscope commands.
	@item{^d}
		Exit gtags-cscope.
	@end_itemize

	NOTE: If the first character of the text to be searched for matches
	one of the above commands, escape it by typing a  (backslash) first.

	Substituting new text for old text

	After the text to be changed has been typed, gtags-cscope will prompt for
	the new text, and then it will display the lines containing the old
	text. Select the lines to be changed with these single-character
	commands:
	@begin_itemize
	@item{0-9a-zA-Z}
		Mark or unmark the line to be changed.
	@item{*}
		Mark or unmark all displayed lines to be changed.
	@item{<Space>}
		Display next set of lines.
	@item{+}
		Display next set of lines.
	@item{-}
		Display previous set of lines.
	@item{a}
		Mark or unmark all lines to be changed.
	@item{^d}
		Change the marked lines and exit.
	@item{<Esc>}
		Exit without changing the marked lines.
	@item{!}
		Start an interactive shell (type ^d to return to gtags-cscope).
	@item{^l}
		Redraw the screen.
	@item{?}
		Give help information about gtags-cscope commands.
	@item{ Special keys}
		If your terminal has arrow keys that work in vi, you can use them
		to move around the input fields. The up-arrow key is useful to move to
		the previous
		input field instead of using the <Tab> key repeatedly. If you have
		<CLEAR>, <NEXT>, or <PREV> keys they will act as the ^l, +, and -
		commands, respectively.
	@end_itemize
@Line-Oriented interface
	The -l option lets you use gtags-cscope where a screen-oriented interface
	would not be useful, for example, from another screen-oriented
	program.

	gtags-cscope will prompt with >> when it is ready for an input line starting
	with the field number (counting from 0) immediately followed by the
	search pattern, for example, ``lmain'' finds the definition of the
	main function.

	If you just want a single search, instead of the -l option use the -L
	and -num pattern options, and you won't get the >> prompt.

	For -l, gtags-cscope outputs the number of reference lines
	cscope: 2 lines

	For each reference found, gtags-cscope outputs a line consisting of the file
	name, function name, line number, and line text, separated by spaces,
	for example,
	main.c main 161 main(argc, argv)

	Note that the editor is not called to display a single reference,
	unlike the screen-oriented interface.

	You can use the c command to toggle ignore/use letter case when
	searching. (When ignoring letter case, search for ``FILE'' will match
	``File'' and ``file''.)

	You can use the r command to rebuild the database.

	gtags-cscope will quit when it detects end-of-file, or when the first
	character of an input line is ``^d'' or ``q''.
@ENVIRONMENT VARIABLES
	The following environment variables are the cscope origin.

	@begin_itemize
	@item{@var{CSCOPE_EDITOR}}
		Overrides the EDITOR and VIEWER variables. Use this if you wish to use
		a different editor with cscope than that specified by your
		EDITOR/VIEWER variables.
	@item{@var{CSCOPE_LINEFLAG}}
		Format of the line number flag for your editor. By default, cscope
		invokes your editor via the equivalent of ``editor +N file'', where
		``N'' is the line number that the editor should jump to. This format
		is used by both emacs and vi. If your editor needs something
		different, specify it in this variable, with ``%s'' as a placeholder
		for the line number.  Ex: if your editor needs to be invoked as
		``editor -#103 file'' to go to line 103, set this variable to
		``-#%s''.
	@item{@var{CSCOPE_LINEFLAG_AFTER_FILE}}
		Set this variable to ``yes'' if your editor needs to be invoked with
		the line number option after the filename to be edited. To continue
		the example from CSCOPE_LINEFLAG, above: if your editor needs to see
		``editor file -#number'', set this environment variable. Users of most
		standard editors (vi, emacs) do not need to set this variable.
	@item{@var{EDITOR}}
		Preferred editor, which defaults to vi.
	@item{@var{HOME}}
		Home directory, which is automatically set at login.
	@item{@var{SHELL}}
		Preferred shell, which defaults to sh.
	@item{@var{TERM}}
		Terminal type, which must be a screen terminal.
	@item{@var{TERMINFO}}
		Terminal information directory full path name. If your terminal
		is not in the standard terminfo directory, see curses
		and terminfo for how to make your own terminal description.
	@item{@var{TMPDIR}}
		Temporary file directory, which defaults to /tmp.
	@item{@var{VIEWER}}
		Preferred file display program (such as less), which overrides
		EDITOR (see above).
	@end_itemize

	The following environment variables are the GLOBAL origin.

	@begin_itemize
	@item{@var{GTAGSROOT}}
		The root directory of the project.
	@item{@var{GTAGSDBPATH}}
		The directory on which tag files exist.
		This value is ignored when @var{GTAGSROOT} is not defined.
	@item{@var{GTAGSLIBPATH}}
		If this variable is set, it is used as the path to search
		for library functions. If the specified object is not
		found in the project, @name{global} also search in these paths.
		Since only @file{GTAGS} is targeted in the retrieval, this variable is
		ignored when the @option{-r} or @option{-s} is specified.
	@item{@var{GTAGSCONF}}
		Configuration file. The default is @file{$HOME/.globalrc}.
	@item{@var{GTAGSLABEL}}
		Configuration label. The default is @arg{default}.
	@item{@var{MAKEOBJDIRPREFIX}}
		If this variable is set, @file{$MAKEOBJDIRPREFIX} is used as the prefix
		of BSD-style objdir. The default is @file{/usr/obj}.
	@end_itemize
@FILES
	@begin_itemize
	@item{@file{GTAGS}}
		Tag file for object definitions.
	@item{@file{GRTAGS}}
		Tag file for object references.
	@item{@file{GPATH}}
		Tag file for path of source files.
	@item{@file{GTAGSROOT}}
		If environment variable @var{GTAGSROOT} is not set
		and file @file{GTAGSROOT} exists in the same directory with @file{GTAGS}
		then @name{global} sets @var{GTAGSROOT} to the contents of the file.
	@item{@file{$HOME/.globalrc}, @file{/etc/gtags.conf}, @file{[sysconfdir]/gtags.conf}}
		Configuration files.
	@end_itemize
@SEE ALSO
	@xref{gtags,1},
	@xref{global,1},
	@xref{htags,1}.

	GNU GLOBAL source code tag system@br
	(http://www.gnu.org/software/global/).
@BUG
	The function field of the display is almost <unknown> since
	GLOBAL doesn't recognize it.

	``Find functions called by this function'' is not implemented.
@AUTHOR
	Joe Steffen (original author) and others
@HISTORY
	@name{Cscope} was originally developed at Bell Labs in the early 1980's,
	and was released as free software under the BSD license in April 2000.
	@name{Gtags-cscope} is a derivative of cscope to use GLOBAL as the back-end.
	Its line-oriented interface was originally written in 2006, and was
	re-implemented in 2011 using cscope itself.
